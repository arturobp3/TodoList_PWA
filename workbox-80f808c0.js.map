{"version":3,"file":"workbox-80f808c0.js","sources":["node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-core/_private/assert.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-core/utils/pluginUtils.js","node_modules/workbox-core/_private/cacheWrapper.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-core/_private/fetchWrapper.js","node_modules/workbox-core/_private/canConstructResponseFromBodyStream.js","node_modules/workbox-core/copyResponse.js","node_modules/workbox-precaching/_version.js","node_modules/workbox-precaching/utils/createCacheKey.js","node_modules/workbox-precaching/PrecacheController.js","node_modules/workbox-precaching/utils/getOrCreatePrecacheController.js","node_modules/workbox-precaching/utils/getCacheKeyForURL.js","node_modules/workbox-precaching/utils/generateURLVariations.js","node_modules/workbox-precaching/utils/removeIgnoredSearchParams.js","node_modules/workbox-precaching/addRoute.js","node_modules/workbox-precaching/utils/addFetchListener.js","node_modules/workbox-precaching/utils/precachePlugins.js","node_modules/workbox-precaching/precache.js","node_modules/workbox-precaching/precacheAndRoute.js"],"sourcesContent":["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:core:5.1.3'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst _cacheNameDetails = {\r\n    googleAnalytics: 'googleAnalytics',\r\n    precache: 'precache-v2',\r\n    prefix: 'workbox',\r\n    runtime: 'runtime',\r\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\r\n};\r\nconst _createCacheName = (cacheName) => {\r\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\r\n        .filter((value) => value && value.length > 0)\r\n        .join('-');\r\n};\r\nconst eachCacheNameDetail = (fn) => {\r\n    for (const key of Object.keys(_cacheNameDetails)) {\r\n        fn(key);\r\n    }\r\n};\r\nexport const cacheNames = {\r\n    updateDetails: (details) => {\r\n        eachCacheNameDetail((key) => {\r\n            if (typeof details[key] === 'string') {\r\n                _cacheNameDetails[key] = details[key];\r\n            }\r\n        });\r\n    },\r\n    getGoogleAnalyticsName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\r\n    },\r\n    getPrecacheName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\r\n    },\r\n    getPrefix: () => {\r\n        return _cacheNameDetails.prefix;\r\n    },\r\n    getRuntimeName: (userCacheName) => {\r\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\r\n    },\r\n    getSuffix: () => {\r\n        return _cacheNameDetails.suffix;\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messages } from './messages.js';\r\nimport '../../_version.js';\r\nconst fallback = (code, ...args) => {\r\n    let msg = code;\r\n    if (args.length > 0) {\r\n        msg += ` :: ${JSON.stringify(args)}`;\r\n    }\r\n    return msg;\r\n};\r\nconst generatorFunction = (code, details = {}) => {\r\n    const message = messages[code];\r\n    if (!message) {\r\n        throw new Error(`Unable to find message for code '${code}'.`);\r\n    }\r\n    return message(details);\r\n};\r\nexport const messageGenerator = (process.env.NODE_ENV === 'production') ?\r\n    fallback : generatorFunction;\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\r\nimport '../_version.js';\r\n/**\r\n * Workbox errors should be thrown with this class.\r\n * This allows use to ensure the type easily in tests,\r\n * helps developers identify errors from workbox\r\n * easily and allows use to optimise error\r\n * messages correctly.\r\n *\r\n * @private\r\n */\r\nclass WorkboxError extends Error {\r\n    /**\r\n     *\r\n     * @param {string} errorCode The error code that\r\n     * identifies this particular error.\r\n     * @param {Object=} details Any relevant arguments\r\n     * that will help developers identify issues should\r\n     * be added as a key on the context object.\r\n     */\r\n    constructor(errorCode, details) {\r\n        const message = messageGenerator(errorCode, details);\r\n        super(message);\r\n        this.name = errorCode;\r\n        this.details = details;\r\n    }\r\n}\r\nexport { WorkboxError };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from '../_private/WorkboxError.js';\r\nimport '../_version.js';\r\n/*\r\n * This method throws if the supplied value is not an array.\r\n * The destructed values are required to produce a meaningful error for users.\r\n * The destructed and restructured object is so it's clear what is\r\n * needed.\r\n */\r\nconst isArray = (value, details) => {\r\n    if (!Array.isArray(value)) {\r\n        throw new WorkboxError('not-an-array', details);\r\n    }\r\n};\r\nconst hasMethod = (object, expectedMethod, details) => {\r\n    const type = typeof object[expectedMethod];\r\n    if (type !== 'function') {\r\n        details['expectedMethod'] = expectedMethod;\r\n        throw new WorkboxError('missing-a-method', details);\r\n    }\r\n};\r\nconst isType = (object, expectedType, details) => {\r\n    if (typeof object !== expectedType) {\r\n        details['expectedType'] = expectedType;\r\n        throw new WorkboxError('incorrect-type', details);\r\n    }\r\n};\r\nconst isInstance = (object, expectedClass, details) => {\r\n    if (!(object instanceof expectedClass)) {\r\n        details['expectedClass'] = expectedClass;\r\n        throw new WorkboxError('incorrect-class', details);\r\n    }\r\n};\r\nconst isOneOf = (value, validValues, details) => {\r\n    if (!validValues.includes(value)) {\r\n        details['validValueDescription'] =\r\n            `Valid values are ${JSON.stringify(validValues)}.`;\r\n        throw new WorkboxError('invalid-value', details);\r\n    }\r\n};\r\nconst isArrayOfClass = (value, expectedClass, details) => {\r\n    const error = new WorkboxError('not-array-of-class', details);\r\n    if (!Array.isArray(value)) {\r\n        throw error;\r\n    }\r\n    for (const item of value) {\r\n        if (!(item instanceof expectedClass)) {\r\n            throw error;\r\n        }\r\n    }\r\n};\r\nconst finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\r\n    hasMethod,\r\n    isArray,\r\n    isInstance,\r\n    isOneOf,\r\n    isType,\r\n    isArrayOfClass,\r\n};\r\nexport { finalAssertExports as assert };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n// Callbacks to be executed whenever there's a quota error.\r\nconst quotaErrorCallbacks = new Set();\r\nexport { quotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nexport const pluginUtils = {\r\n    filter: (plugins, callbackName) => {\r\n        return plugins.filter((plugin) => callbackName in plugin);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from './assert.js';\r\nimport { executeQuotaErrorCallbacks } from './executeQuotaErrorCallbacks.js';\r\nimport { getFriendlyURL } from './getFriendlyURL.js';\r\nimport { logger } from './logger.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport '../_version.js';\r\n/**\r\n * Checks the list of plugins for the cacheKeyWillBeUsed callback, and\r\n * executes any of those callbacks found in sequence. The final `Request` object\r\n * returned by the last plugin is treated as the cache key for cache reads\r\n * and/or writes.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {string} options.mode\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Request>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _getEffectiveRequest = async ({ request, mode, plugins = [], }) => {\r\n    const cacheKeyWillBeUsedPlugins = pluginUtils.filter(plugins, \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */);\r\n    let effectiveRequest = request;\r\n    for (const plugin of cacheKeyWillBeUsedPlugins) {\r\n        effectiveRequest = await plugin[\"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */].call(plugin, { mode, request: effectiveRequest });\r\n        if (typeof effectiveRequest === 'string') {\r\n            effectiveRequest = new Request(effectiveRequest);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(effectiveRequest, Request, {\r\n                moduleName: 'Plugin',\r\n                funcName: \"cacheKeyWillBeUsed\" /* CACHE_KEY_WILL_BE_USED */,\r\n                isReturnValueProblem: true,\r\n            });\r\n        }\r\n    }\r\n    return effectiveRequest;\r\n};\r\n/**\r\n * This method will call cacheWillUpdate on the available plugins (or use\r\n * status === 200) to determine if the Response is safe and valid to cache.\r\n *\r\n * @param {Object} options\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst _isResponseSafeToCache = async ({ request, response, event, plugins = [], }) => {\r\n    let responseToCache = response;\r\n    let pluginsUsed = false;\r\n    for (const plugin of plugins) {\r\n        if (\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */ in plugin) {\r\n            pluginsUsed = true;\r\n            const pluginMethod = plugin[\"cacheWillUpdate\" /* CACHE_WILL_UPDATE */];\r\n            responseToCache = await pluginMethod.call(plugin, {\r\n                request,\r\n                response: responseToCache,\r\n                event,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (responseToCache) {\r\n                    assert.isInstance(responseToCache, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cacheWillUpdate\" /* CACHE_WILL_UPDATE */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n            if (!responseToCache) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!pluginsUsed) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (responseToCache) {\r\n                if (responseToCache.status !== 200) {\r\n                    if (responseToCache.status === 0) {\r\n                        logger.warn(`The response for '${request.url}' is an opaque ` +\r\n                            `response. The caching strategy that you're using will not ` +\r\n                            `cache opaque responses by default.`);\r\n                    }\r\n                    else {\r\n                        logger.debug(`The response for '${request.url}' returned ` +\r\n                            `a status code of '${response.status}' and won't be cached as a ` +\r\n                            `result.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        responseToCache = responseToCache && responseToCache.status === 200 ?\r\n            responseToCache : undefined;\r\n    }\r\n    return responseToCache ? responseToCache : null;\r\n};\r\n/**\r\n * This is a wrapper around cache.match().\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName Name of the cache to match against.\r\n * @param {Request} options.request The Request that will be used to look up\r\n *     cache entries.\r\n * @param {Event} [options.event] The event that prompted the action.\r\n * @param {Object} [options.matchOptions] Options passed to cache.match().\r\n * @param {Array<Object>} [options.plugins=[]] Array of plugins.\r\n * @return {Response} A cached response if available.\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst matchWrapper = async ({ cacheName, request, event, matchOptions, plugins = [], }) => {\r\n    const cache = await self.caches.open(cacheName);\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'read'\r\n    });\r\n    let cachedResponse = await cache.match(effectiveRequest, matchOptions);\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (cachedResponse) {\r\n            logger.debug(`Found a cached response in '${cacheName}'.`);\r\n        }\r\n        else {\r\n            logger.debug(`No cached response found in '${cacheName}'.`);\r\n        }\r\n    }\r\n    for (const plugin of plugins) {\r\n        if (\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */ in plugin) {\r\n            const pluginMethod = plugin[\"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */];\r\n            cachedResponse = await pluginMethod.call(plugin, {\r\n                cacheName,\r\n                event,\r\n                matchOptions,\r\n                cachedResponse,\r\n                request: effectiveRequest,\r\n            });\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (cachedResponse) {\r\n                    assert.isInstance(cachedResponse, Response, {\r\n                        moduleName: 'Plugin',\r\n                        funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                        isReturnValueProblem: true,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return cachedResponse;\r\n};\r\n/**\r\n * Wrapper around cache.put().\r\n *\r\n * Will call `cacheDidUpdate` on plugins if the cache was updated, using\r\n * `matchOptions` when determining what the old entry is.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.cacheName\r\n * @param {Request} options.request\r\n * @param {Response} options.response\r\n * @param {Event} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @param {Object} [options.matchOptions]\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst putWrapper = async ({ cacheName, request, response, event, plugins = [], matchOptions, }) => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        if (request.method && request.method !== 'GET') {\r\n            throw new WorkboxError('attempt-to-cache-non-get-request', {\r\n                url: getFriendlyURL(request.url),\r\n                method: request.method,\r\n            });\r\n        }\r\n    }\r\n    const effectiveRequest = await _getEffectiveRequest({\r\n        plugins, request, mode: 'write'\r\n    });\r\n    if (!response) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Cannot cache non-existent response for ` +\r\n                `'${getFriendlyURL(effectiveRequest.url)}'.`);\r\n        }\r\n        throw new WorkboxError('cache-put-with-no-response', {\r\n            url: getFriendlyURL(effectiveRequest.url),\r\n        });\r\n    }\r\n    const responseToCache = await _isResponseSafeToCache({\r\n        event,\r\n        plugins,\r\n        response,\r\n        request: effectiveRequest,\r\n    });\r\n    if (!responseToCache) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' will ` +\r\n                `not be cached.`, responseToCache);\r\n        }\r\n        return;\r\n    }\r\n    const cache = await self.caches.open(cacheName);\r\n    const updatePlugins = pluginUtils.filter(plugins, \"cacheDidUpdate\" /* CACHE_DID_UPDATE */);\r\n    const oldResponse = updatePlugins.length > 0 ?\r\n        await matchWrapper({ cacheName, matchOptions, request: effectiveRequest }) :\r\n        null;\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.debug(`Updating the '${cacheName}' cache with a new Response for ` +\r\n            `${getFriendlyURL(effectiveRequest.url)}.`);\r\n    }\r\n    try {\r\n        await cache.put(effectiveRequest, responseToCache);\r\n    }\r\n    catch (error) {\r\n        // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\r\n        if (error.name === 'QuotaExceededError') {\r\n            await executeQuotaErrorCallbacks();\r\n        }\r\n        throw error;\r\n    }\r\n    for (const plugin of updatePlugins) {\r\n        await plugin[\"cacheDidUpdate\" /* CACHE_DID_UPDATE */].call(plugin, {\r\n            cacheName,\r\n            event,\r\n            oldResponse,\r\n            newResponse: responseToCache,\r\n            request: effectiveRequest,\r\n        });\r\n    }\r\n};\r\nexport const cacheWrapper = {\r\n    put: putWrapper,\r\n    match: matchWrapper,\r\n};\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from '../_private/logger.js';\r\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\r\nimport '../_version.js';\r\n/**\r\n * Runs all of the callback functions, one at a time sequentially, in the order\r\n * in which they were registered.\r\n *\r\n * @memberof module:workbox-core\r\n * @private\r\n */\r\nasync function executeQuotaErrorCallbacks() {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\r\n            `callbacks to clean up caches.`);\r\n    }\r\n    for (const callback of quotaErrorCallbacks) {\r\n        await callback();\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(callback, 'is complete.');\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        logger.log('Finished running callbacks.');\r\n    }\r\n}\r\nexport { executeQuotaErrorCallbacks };\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from './WorkboxError.js';\r\nimport { logger } from './logger.js';\r\nimport { assert } from './assert.js';\r\nimport { getFriendlyURL } from '../_private/getFriendlyURL.js';\r\nimport { pluginUtils } from '../utils/pluginUtils.js';\r\nimport '../_version.js';\r\n/**\r\n * Wrapper around the fetch API.\r\n *\r\n * Will call requestWillFetch on available plugins.\r\n *\r\n * @param {Object} options\r\n * @param {Request|string} options.request\r\n * @param {Object} [options.fetchOptions]\r\n * @param {ExtendableEvent} [options.event]\r\n * @param {Array<Object>} [options.plugins=[]]\r\n * @return {Promise<Response>}\r\n *\r\n * @private\r\n * @memberof module:workbox-core\r\n */\r\nconst wrappedFetch = async ({ request, fetchOptions, event, plugins = [], }) => {\r\n    if (typeof request === 'string') {\r\n        request = new Request(request);\r\n    }\r\n    // We *should* be able to call `await event.preloadResponse` even if it's\r\n    // undefined, but for some reason, doing so leads to errors in our Node unit\r\n    // tests. To work around that, explicitly check preloadResponse's value first.\r\n    if (event instanceof FetchEvent && event.preloadResponse) {\r\n        const possiblePreloadResponse = await event.preloadResponse;\r\n        if (possiblePreloadResponse) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`Using a preloaded navigation response for ` +\r\n                    `'${getFriendlyURL(request.url)}'`);\r\n            }\r\n            return possiblePreloadResponse;\r\n        }\r\n    }\r\n    if (process.env.NODE_ENV !== 'production') {\r\n        assert.isInstance(request, Request, {\r\n            paramName: 'request',\r\n            expectedClass: Request,\r\n            moduleName: 'workbox-core',\r\n            className: 'fetchWrapper',\r\n            funcName: 'wrappedFetch',\r\n        });\r\n    }\r\n    const failedFetchPlugins = pluginUtils.filter(plugins, \"fetchDidFail\" /* FETCH_DID_FAIL */);\r\n    // If there is a fetchDidFail plugin, we need to save a clone of the\r\n    // original request before it's either modified by a requestWillFetch\r\n    // plugin or before the original request's body is consumed via fetch().\r\n    const originalRequest = failedFetchPlugins.length > 0 ?\r\n        request.clone() : null;\r\n    try {\r\n        for (const plugin of plugins) {\r\n            if (\"requestWillFetch\" /* REQUEST_WILL_FETCH */ in plugin) {\r\n                const pluginMethod = plugin[\"requestWillFetch\" /* REQUEST_WILL_FETCH */];\r\n                const requestClone = request.clone();\r\n                request = await pluginMethod.call(plugin, {\r\n                    request: requestClone,\r\n                    event,\r\n                });\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (request) {\r\n                        assert.isInstance(request, Request, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"cachedResponseWillBeUsed\" /* CACHED_RESPONSE_WILL_BE_USED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    catch (err) {\r\n        throw new WorkboxError('plugin-error-request-will-fetch', {\r\n            thrownError: err,\r\n        });\r\n    }\r\n    // The request can be altered by plugins with `requestWillFetch` making\r\n    // the original request (Most likely from a `fetch` event) to be different\r\n    // to the Request we make. Pass both to `fetchDidFail` to aid debugging.\r\n    const pluginFilteredRequest = request.clone();\r\n    try {\r\n        let fetchResponse;\r\n        // See https://github.com/GoogleChrome/workbox/issues/1796\r\n        if (request.mode === 'navigate') {\r\n            fetchResponse = await fetch(request);\r\n        }\r\n        else {\r\n            fetchResponse = await fetch(request, fetchOptions);\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' returned a response with ` +\r\n                `status '${fetchResponse.status}'.`);\r\n        }\r\n        for (const plugin of plugins) {\r\n            if (\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */ in plugin) {\r\n                fetchResponse = await plugin[\"fetchDidSucceed\" /* FETCH_DID_SUCCEED */]\r\n                    .call(plugin, {\r\n                    event,\r\n                    request: pluginFilteredRequest,\r\n                    response: fetchResponse,\r\n                });\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (fetchResponse) {\r\n                        assert.isInstance(fetchResponse, Response, {\r\n                            moduleName: 'Plugin',\r\n                            funcName: \"fetchDidSucceed\" /* FETCH_DID_SUCCEED */,\r\n                            isReturnValueProblem: true,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return fetchResponse;\r\n    }\r\n    catch (error) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Network request for ` +\r\n                `'${getFriendlyURL(request.url)}' threw an error.`, error);\r\n        }\r\n        for (const plugin of failedFetchPlugins) {\r\n            await plugin[\"fetchDidFail\" /* FETCH_DID_FAIL */].call(plugin, {\r\n                error,\r\n                event,\r\n                originalRequest: originalRequest.clone(),\r\n                request: pluginFilteredRequest.clone(),\r\n            });\r\n        }\r\n        throw error;\r\n    }\r\n};\r\nconst fetchWrapper = {\r\n    fetch: wrappedFetch,\r\n};\r\nexport { fetchWrapper };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nlet supportStatus;\r\n/**\r\n * A utility function that determines whether the current browser supports\r\n * constructing a new `Response` from a `response.body` stream.\r\n *\r\n * @return {boolean} `true`, if the current browser can successfully\r\n *     construct a `Response` from a `response.body` stream, `false` otherwise.\r\n *\r\n * @private\r\n */\r\nfunction canConstructResponseFromBodyStream() {\r\n    if (supportStatus === undefined) {\r\n        const testResponse = new Response('');\r\n        if ('body' in testResponse) {\r\n            try {\r\n                new Response(testResponse.body);\r\n                supportStatus = true;\r\n            }\r\n            catch (error) {\r\n                supportStatus = false;\r\n            }\r\n        }\r\n        supportStatus = false;\r\n    }\r\n    return supportStatus;\r\n}\r\nexport { canConstructResponseFromBodyStream };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof module:workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream() ?\r\n        clonedResponse.body : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n","\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:precaching:5.1.3'] && _();\r\n}\r\ncatch (e) { }\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport '../_version.js';\r\n// Name of the search parameter used to store revision info.\r\nconst REVISION_SEARCH_PARAM = '__WB_REVISION__';\r\n/**\r\n * Converts a manifest entry into a versioned URL suitable for precaching.\r\n *\r\n * @param {Object|string} entry\r\n * @return {string} A URL with versioning info.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function createCacheKey(entry) {\r\n    if (!entry) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If a precache manifest entry is a string, it's assumed to be a versioned\r\n    // URL, like '/app.abcd1234.js'. Return as-is.\r\n    if (typeof entry === 'string') {\r\n        const urlObject = new URL(entry, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    const { revision, url } = entry;\r\n    if (!url) {\r\n        throw new WorkboxError('add-to-cache-list-unexpected-type', { entry });\r\n    }\r\n    // If there's just a URL and no revision, then it's also assumed to be a\r\n    // versioned URL.\r\n    if (!revision) {\r\n        const urlObject = new URL(url, location.href);\r\n        return {\r\n            cacheKey: urlObject.href,\r\n            url: urlObject.href,\r\n        };\r\n    }\r\n    // Otherwise, construct a properly versioned URL using the custom Workbox\r\n    // search parameter along with the revision info.\r\n    const cacheKeyURL = new URL(url, location.href);\r\n    const originalURL = new URL(url, location.href);\r\n    cacheKeyURL.searchParams.set(REVISION_SEARCH_PARAM, revision);\r\n    return {\r\n        cacheKey: cacheKeyURL.href,\r\n        url: originalURL.href,\r\n    };\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { cacheWrapper } from 'workbox-core/_private/cacheWrapper.js';\r\nimport { fetchWrapper } from 'workbox-core/_private/fetchWrapper.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport './_version.js';\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {string} [cacheName] An optional name for the cache, to override\r\n     * the default precache name.\r\n     */\r\n    constructor(cacheName) {\r\n        this._cacheName = cacheNames.getPrecacheName(cacheName);\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {\r\n     * Array<module:workbox-precaching.PrecacheController.PrecacheEntry|string>\r\n     * } entries Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = (typeof entry !== 'string' && entry.revision) ?\r\n                'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * @param {Object} options\r\n     * @param {Event} [options.event] The install event (if needed).\r\n     * @param {Array<Object>} [options.plugins] Plugins to be used for fetching\r\n     * and caching during install.\r\n     * @return {Promise<module:workbox-precaching.InstallResult>}\r\n     */\r\n    async install({ event, plugins } = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (plugins) {\r\n                assert.isArray(plugins, {\r\n                    moduleName: 'workbox-precaching',\r\n                    className: 'PrecacheController',\r\n                    funcName: 'install',\r\n                    paramName: 'plugins',\r\n                });\r\n            }\r\n        }\r\n        const toBePrecached = [];\r\n        const alreadyPrecached = [];\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const alreadyCachedRequests = await cache.keys();\r\n        const existingCacheKeys = new Set(alreadyCachedRequests.map((request) => request.url));\r\n        for (const [url, cacheKey] of this._urlsToCacheKeys) {\r\n            if (existingCacheKeys.has(cacheKey)) {\r\n                alreadyPrecached.push(url);\r\n            }\r\n            else {\r\n                toBePrecached.push({ cacheKey, url });\r\n            }\r\n        }\r\n        const precacheRequests = toBePrecached.map(({ cacheKey, url }) => {\r\n            const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n            const cacheMode = this._urlsToCacheModes.get(url);\r\n            return this._addURLToCache({\r\n                cacheKey,\r\n                cacheMode,\r\n                event,\r\n                integrity,\r\n                plugins,\r\n                url,\r\n            });\r\n        });\r\n        await Promise.all(precacheRequests);\r\n        const updatedURLs = toBePrecached.map((item) => item.url);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printInstallDetails(updatedURLs, alreadyPrecached);\r\n        }\r\n        return {\r\n            updatedURLs,\r\n            notUpdatedURLs: alreadyPrecached,\r\n        };\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * @return {Promise<module:workbox-precaching.CleanupResult>}\r\n     */\r\n    async activate() {\r\n        const cache = await self.caches.open(this._cacheName);\r\n        const currentlyCachedRequests = await cache.keys();\r\n        const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n        const deletedURLs = [];\r\n        for (const request of currentlyCachedRequests) {\r\n            if (!expectedCacheKeys.has(request.url)) {\r\n                await cache.delete(request);\r\n                deletedURLs.push(request.url);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            printCleanupDetails(deletedURLs);\r\n        }\r\n        return { deletedURLs };\r\n    }\r\n    /**\r\n     * Requests the entry and saves it to the cache if the response is valid.\r\n     * By default, any response with a status code of less than 400 (including\r\n     * opaque responses) is considered valid.\r\n     *\r\n     * If you need to use custom criteria to determine what's valid and what\r\n     * isn't, then pass in an item in `options.plugins` that implements the\r\n     * `cacheWillUpdate()` lifecycle event.\r\n     *\r\n     * @private\r\n     * @param {Object} options\r\n     * @param {string} options.cacheKey The string to use a cache key.\r\n     * @param {string} options.url The URL to fetch and cache.\r\n     * @param {string} [options.cacheMode] The cache mode for the network request.\r\n     * @param {Event} [options.event] The install event (if passed).\r\n     * @param {Array<Object>} [options.plugins] An array of plugins to apply to\r\n     * fetch and caching.\r\n     * @param {string} [options.integrity] The value to use for the `integrity`\r\n     * field when making the request.\r\n     */\r\n    async _addURLToCache({ cacheKey, url, cacheMode, event, plugins, integrity }) {\r\n        const request = new Request(url, {\r\n            integrity,\r\n            cache: cacheMode,\r\n            credentials: 'same-origin',\r\n        });\r\n        let response = await fetchWrapper.fetch({\r\n            event,\r\n            plugins,\r\n            request,\r\n        });\r\n        // Allow developers to override the default logic about what is and isn't\r\n        // valid by passing in a plugin implementing cacheWillUpdate(), e.g.\r\n        // a `CacheableResponsePlugin` instance.\r\n        let cacheWillUpdatePlugin;\r\n        for (const plugin of (plugins || [])) {\r\n            if ('cacheWillUpdate' in plugin) {\r\n                cacheWillUpdatePlugin = plugin;\r\n            }\r\n        }\r\n        const isValidResponse = cacheWillUpdatePlugin ?\r\n            // Use a callback if provided. It returns a truthy value if valid.\r\n            // NOTE: invoke the method on the plugin instance so the `this` context\r\n            // is correct.\r\n            await cacheWillUpdatePlugin.cacheWillUpdate({ event, request, response }) :\r\n            // Otherwise, default to considering any response status under 400 valid.\r\n            // This includes, by default, considering opaque responses valid.\r\n            response.status < 400;\r\n        // Consider this a failure, leading to the `install` handler failing, if\r\n        // we get back an invalid response.\r\n        if (!isValidResponse) {\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        if (response.redirected) {\r\n            response = await copyResponse(response);\r\n        }\r\n        await cacheWrapper.put({\r\n            event,\r\n            plugins,\r\n            response,\r\n            // `request` already uses `url`. We may be able to reuse it.\r\n            request: cacheKey === url ? request : new Request(cacheKey),\r\n            cacheName: this._cacheName,\r\n            matchOptions: {\r\n                ignoreSearch: true,\r\n            },\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this._cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that can be used within a\r\n     * {@link module:workbox-routing.Route} that will find a response for the\r\n     * incoming request against the precache.\r\n     *\r\n     * If for an unexpected reason there is a cache miss for the request,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandler(fallbackToNetwork = true) {\r\n        return async ({ request }) => {\r\n            try {\r\n                const response = await this.matchPrecache(request);\r\n                if (response) {\r\n                    return response;\r\n                }\r\n                // This shouldn't normally happen, but there are edge cases:\r\n                // https://github.com/GoogleChrome/workbox/issues/1441\r\n                throw new WorkboxError('missing-precache-entry', {\r\n                    cacheName: this._cacheName,\r\n                    url: request instanceof Request ? request.url : request,\r\n                });\r\n            }\r\n            catch (error) {\r\n                if (fallbackToNetwork) {\r\n                    if (process.env.NODE_ENV !== 'production') {\r\n                        logger.debug(`Unable to respond with precached response. ` +\r\n                            `Falling back to network.`, error);\r\n                    }\r\n                    return fetch(request);\r\n                }\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * If for an unexpected reason there is a cache miss when looking up `url`,\r\n     * this will fall back to retrieving the `Response` via `fetch()` when\r\n     * `fallbackToNetwork` is `true`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @param {boolean} [fallbackToNetwork=true] Whether to attempt to get the\r\n     * response from the network if there's a precache miss.\r\n     * @return {module:workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url, fallbackToNetwork = true) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        const handler = this.createHandler(fallbackToNetwork);\r\n        const request = new Request(url);\r\n        return () => handler({ request });\r\n    }\r\n}\r\nexport { PrecacheController };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { PrecacheController } from '../PrecacheController.js';\r\nimport '../_version.js';\r\nlet precacheController;\r\n/**\r\n * @return {PrecacheController}\r\n * @private\r\n */\r\nexport const getOrCreatePrecacheController = () => {\r\n    if (!precacheController) {\r\n        precacheController = new PrecacheController();\r\n    }\r\n    return precacheController;\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './getOrCreatePrecacheController.js';\r\nimport { generateURLVariations } from './generateURLVariations.js';\r\nimport '../_version.js';\r\n/**\r\n * This function will take the request URL and manipulate it based on the\r\n * configuration options.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n * @return {string} Returns the URL in the cache that matches the request,\r\n * if possible.\r\n *\r\n * @private\r\n */\r\nexport const getCacheKeyForURL = (url, options) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const urlsToCacheKeys = precacheController.getURLsToCacheKeys();\r\n    for (const possibleURL of generateURLVariations(url, options)) {\r\n        const possibleCacheKey = urlsToCacheKeys.get(possibleURL);\r\n        if (possibleCacheKey) {\r\n            return possibleCacheKey;\r\n        }\r\n    }\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching, directoryIndex, cleanURLs, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n","/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * Removes any URL search parameters that should be ignored.\r\n *\r\n * @param {URL} urlObject The original URL.\r\n * @param {Array<RegExp>} ignoreURLParametersMatching RegExps to test against\r\n * each search parameter name. Matches mean that the search parameter should be\r\n * ignored.\r\n * @return {URL} The URL with any ignored search parameters removed.\r\n *\r\n * @private\r\n * @memberof module:workbox-precaching\r\n */\r\nexport function removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching = []) {\r\n    // Convert the iterable into an array at the start of the loop to make sure\r\n    // deletion doesn't mess up iteration.\r\n    for (const paramName of [...urlObject.searchParams.keys()]) {\r\n        if (ignoreURLParametersMatching.some((regExp) => regExp.test(paramName))) {\r\n            urlObject.searchParams.delete(paramName);\r\n        }\r\n    }\r\n    return urlObject;\r\n}\r\n","/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addFetchListener } from './utils/addFetchListener.js';\r\nimport './_version.js';\r\nlet listenerAdded = false;\r\n/**\r\n * Add a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {module:workbox-precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction addRoute(options) {\r\n    if (!listenerAdded) {\r\n        addFetchListener(options);\r\n        listenerAdded = true;\r\n    }\r\n}\r\nexport { addRoute };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getCacheKeyForURL } from './getCacheKeyForURL.js';\r\nimport '../_version.js';\r\n/**\r\n * Adds a `fetch` listener to the service worker that will\r\n * respond to\r\n * [network requests]{@link https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers#Custom_responses_to_requests}\r\n * with precached assets.\r\n *\r\n * Requests for assets that aren't precached, the `FetchEvent` will not be\r\n * responded to, allowing the event to fall through to other `fetch` event\r\n * listeners.\r\n *\r\n * NOTE: when called more than once this method will replace the previously set\r\n * configuration options. Calling it more than once is not recommended outside\r\n * of tests.\r\n *\r\n * @private\r\n * @param {Object} [options]\r\n * @param {string} [options.directoryIndex=index.html] The `directoryIndex` will\r\n * check cache entries for a URLs ending with '/' to see if there is a hit when\r\n * appending the `directoryIndex` value.\r\n * @param {Array<RegExp>} [options.ignoreURLParametersMatching=[/^utm_/]] An\r\n * array of regex's to remove search params when looking for a cache match.\r\n * @param {boolean} [options.cleanURLs=true] The `cleanURLs` option will\r\n * check the cache for the URL with a `.html` added to the end of the end.\r\n * @param {workbox.precaching~urlManipulation} [options.urlManipulation]\r\n * This is a function that should take a URL and return an array of\r\n * alternative URLs that should be checked for precache matches.\r\n */\r\nexport const addFetchListener = ({ ignoreURLParametersMatching = [/^utm_/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) => {\r\n    const cacheName = cacheNames.getPrecacheName();\r\n    // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n    self.addEventListener('fetch', ((event) => {\r\n        const precachedURL = getCacheKeyForURL(event.request.url, {\r\n            cleanURLs,\r\n            directoryIndex,\r\n            ignoreURLParametersMatching,\r\n            urlManipulation,\r\n        });\r\n        if (!precachedURL) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Precaching did not find a match for ` +\r\n                    getFriendlyURL(event.request.url));\r\n            }\r\n            return;\r\n        }\r\n        let responsePromise = self.caches.open(cacheName).then((cache) => {\r\n            return cache.match(precachedURL);\r\n        }).then((cachedResponse) => {\r\n            if (cachedResponse) {\r\n                return cachedResponse;\r\n            }\r\n            // Fall back to the network if we don't have a cached response\r\n            // (perhaps due to manual cache cleanup).\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(precachedURL)} in ${cacheName} was not found. ` +\r\n                    `Falling back to the network instead.`);\r\n            }\r\n            return fetch(precachedURL);\r\n        });\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            responsePromise = responsePromise.then((response) => {\r\n                // Workbox is going to handle the route.\r\n                // print the routing details to the console.\r\n                logger.groupCollapsed(`Precaching is responding to: ` +\r\n                    getFriendlyURL(event.request.url));\r\n                logger.log(`Serving the precached url: ${precachedURL}`);\r\n                logger.groupCollapsed(`View request details here.`);\r\n                logger.log(event.request);\r\n                logger.groupEnd();\r\n                logger.groupCollapsed(`View response details here.`);\r\n                logger.log(response);\r\n                logger.groupEnd();\r\n                logger.groupEnd();\r\n                return response;\r\n            });\r\n        }\r\n        event.respondWith(responsePromise);\r\n    }));\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst plugins = [];\r\nexport const precachePlugins = {\r\n    /*\r\n     * @return {Array}\r\n     * @private\r\n     */\r\n    get() {\r\n        return plugins;\r\n    },\r\n    /*\r\n     * @param {Array} newPlugins\r\n     * @private\r\n     */\r\n    add(newPlugins) {\r\n        plugins.push(...newPlugins);\r\n    },\r\n};\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport { precachePlugins } from './utils/precachePlugins.js';\r\nimport './_version.js';\r\nconst installListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    const plugins = precachePlugins.get();\r\n    event.waitUntil(precacheController.install({ event, plugins })\r\n        .catch((error) => {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.error(`Service worker installation failed. It will ` +\r\n                `be retried automatically during the next navigation.`);\r\n        }\r\n        // Re-throw the error to ensure installation fails.\r\n        throw error;\r\n    }));\r\n};\r\nconst activateListener = (event) => {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    event.waitUntil(precacheController.activate());\r\n};\r\n/**\r\n * Adds items to the precache list, removing any duplicates and\r\n * stores the files in the\r\n * [\"precache cache\"]{@link module:workbox-core.cacheNames} when the service\r\n * worker installs.\r\n *\r\n * This method can be called multiple times.\r\n *\r\n * Please note: This method **will not** serve any of the cached files for you.\r\n * It only precaches files. To respond to a network request you call\r\n * [addRoute()]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * If you have a single array of files to precache, you can just call\r\n * [precacheAndRoute()]{@link module:workbox-precaching.precacheAndRoute}.\r\n *\r\n * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precache(entries) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    precacheController.addToCacheList(entries);\r\n    if (entries.length > 0) {\r\n        // NOTE: these listeners will only be added once (even if the `precache()`\r\n        // method is called multiple times) because event listeners are implemented\r\n        // as a set, where each listener must be unique.\r\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\r\n        self.addEventListener('install', installListener);\r\n        self.addEventListener('activate', activateListener);\r\n    }\r\n}\r\nexport { precache };\r\n","/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { addRoute } from './addRoute.js';\r\nimport { precache } from './precache.js';\r\nimport './_version.js';\r\n/**\r\n * This method will add entries to the precache list and add a route to\r\n * respond to fetch events.\r\n *\r\n * This is a convenience method that will call\r\n * [precache()]{@link module:workbox-precaching.precache} and\r\n * [addRoute()]{@link module:workbox-precaching.addRoute} in a single call.\r\n *\r\n * @param {Array<Object|string>} entries Array of entries to precache.\r\n * @param {Object} [options] See\r\n * [addRoute() options]{@link module:workbox-precaching.addRoute}.\r\n *\r\n * @memberof module:workbox-precaching\r\n */\r\nfunction precacheAndRoute(entries, options) {\r\n    precache(entries);\r\n    addRoute(options);\r\n}\r\nexport { precacheAndRoute };\r\n"],"names":["self","_","e","_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","_createCacheName","cacheName","filter","value","length","join","cacheNames","userCacheName","getFriendlyURL","url","URL","String","location","href","replace","RegExp","origin","messageGenerator","code","args","msg","JSON","stringify","WorkboxError","Error","constructor","errorCode","details","name","quotaErrorCallbacks","Set","pluginUtils","plugins","callbackName","plugin","_getEffectiveRequest","async","request","mode","cacheKeyWillBeUsedPlugins","effectiveRequest","call","Request","matchWrapper","event","matchOptions","cache","caches","open","cachedResponse","match","pluginMethod","cacheWrapper","response","responseToCache","pluginsUsed","status","undefined","_isResponseSafeToCache","updatePlugins","oldResponse","put","error","callback","executeQuotaErrorCallbacks","newResponse","fetchWrapper","fetchOptions","FetchEvent","preloadResponse","possiblePreloadResponse","failedFetchPlugins","originalRequest","clone","requestClone","err","thrownError","pluginFilteredRequest","fetchResponse","fetch","supportStatus","copyResponse","modifier","clonedResponse","responseInit","headers","Headers","statusText","modifiedResponseInit","body","testResponse","Response","canConstructResponseFromBodyStream","blob","createCacheKey","entry","urlObject","cacheKey","revision","cacheKeyURL","originalURL","searchParams","set","PrecacheController","_cacheName","_urlsToCacheKeys","Map","_urlsToCacheModes","_cacheKeysToIntegrities","addToCacheList","entries","urlsToWarnAbout","push","cacheMode","this","has","get","firstEntry","secondEntry","integrity","warningMessage","console","warn","toBePrecached","alreadyPrecached","alreadyCachedRequests","keys","existingCacheKeys","map","precacheRequests","_addURLToCache","Promise","all","updatedURLs","item","notUpdatedURLs","currentlyCachedRequests","expectedCacheKeys","values","deletedURLs","delete","credentials","cacheWillUpdatePlugin","cacheWillUpdate","redirected","ignoreSearch","getURLsToCacheKeys","getCachedURLs","getCacheKeyForURL","createHandler","fallbackToNetwork","matchPrecache","createHandlerBoundToURL","handler","precacheController","getOrCreatePrecacheController","options","urlsToCacheKeys","possibleURL","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","hash","urlWithoutIgnoredParams","paramName","some","regExp","test","removeIgnoredSearchParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt","generateURLVariations","possibleCacheKey","listenerAdded","addRoute","addEventListener","precachedURL","responsePromise","then","respondWith","addFetchListener","precachePlugins","add","newPlugins","installListener","waitUntil","install","catch","activateListener","activate"],"mappings":"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"}